{
	"info": {
		"_postman_id": "244fd8d3-1ade-4f6d-a9b9-66bf54885296",
		"name": "BetterCalm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Content tests",
			"item": [
				{
					"name": "AddValidContent",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Author\": \"Buitres\",\r\n    \"CategoryId\": 3,\r\n    \"ContentURL\": \"urlCONTENIDO\",\r\n    \"Duration\": 3.2,\r\n    \"ImageURL\": \"urlIMAGEN\",\r\n    \"Name\": \"Cadillac solitario\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/playablecontent",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"playablecontent"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddAnotherValidContent",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Author\": \"Buenos Muchachos\",\r\n    \"CategoryId\": 3,\r\n    \"ContentURL\": \"urlCONTENIDO\",\r\n    \"Duration\": 2.2,\r\n    \"ImageURL\": \"urlIMAGEN\",\r\n    \"Name\": \"Sin hogar\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/playablecontent",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"playablecontent"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddInvalidContent",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Author\": \"Buenos Muchachos\",\r\n    \"CategoryId\": 3,\r\n    \"ContentURL\": \"urlCONTENIDO\",\r\n    \"Duration\": 2.2,\r\n    \"ImageURL\": \"urlIMAGEN\",\r\n    \"Name\": \"Sin hogar\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/playablecontent",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"playablecontent"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteValidContent",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/playablecontent/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"playablecontent",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteInvalidContent",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/playablecontent/0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"playablecontent",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetValidContent",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/playablecontent/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"playablecontent",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetInvalidContent",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/playablecontent/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"playablecontent",
								"100"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authenticate as administrator",
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication successful\", function () {",
									"    pm.response.to.have.status(202)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Admin\",\r\n    \"Email\": \"admin@admin.admin\",\r\n    \"Password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/administrators/authenticate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get categories without authenticating",
			"item": [
				{
					"name": "Get Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Categories retrieved successfully\", function () {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get content without authenticating",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"contentId\", jsonResponse.id);\r",
									"pm.environment.set(\"contentName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Content created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"asdas\",\r\n    \"categoryId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playablecontent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content without authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct content retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"contentName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playablecontent/{{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent",
								"{{contentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete content as administrator",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"contentId\", jsonResponse.id);\r",
									"pm.environment.set(\"contentName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Content created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"asdas\",\r\n    \"categoryId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playablecontent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new content created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct content retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"contentName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playablecontent/{{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent",
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content deleted successfully\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playablecontent/{{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent",
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert created content deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check content deleted successfully\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playablecontent/{{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent",
								"{{contentId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete playlist as administrator",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"playlistId\", jsonResponse.id);\r",
									"pm.environment.set(\"playlistName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Playlist created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"CategoryId\": 3,\r\n            \"Description\": \"Rock uruguayo\",\r\n            \"ImageURL\": \"\",\r\n            \"Name\": \"Rock uruguayo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playlist",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new playlist created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Playlist retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct playlist retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"playlistName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playlist/{{playlistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist",
								"{{playlistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"playlist deleted successfully\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playlist/{{playlistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist",
								"{{playlistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert created playlist deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check playlist deleted successfully\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playlist/{{playlistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist",
								"{{playlistId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get playlist without authenticating",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"playlistId\", jsonResponse.id);\r",
									"pm.environment.set(\"playlisttName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Playlist created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"CategoryId\": 3,\r\n            \"Description\": \"Rock uruguayo\",\r\n            \"ImageURL\": \"\",\r\n            \"Name\": \"Rock uruguayo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playlist",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new content created Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Playlist retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct playlist retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"playlistName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playlist/{{playlistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist",
								"{{playlistId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create playable content as administrator",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"contentId\", jsonResponse.id);\r",
									"pm.environment.set(\"contentName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Content created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"asdas\",\r\n    \"categoryId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playablecontent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new content created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct content retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"contentName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playablecontent/{{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent",
								"{{contentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add content to playlist without authentication",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"contentId\", jsonResponse.id);\r",
									"pm.environment.set(\"contentName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Content created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"asdas\",\r\n    \"categoryId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playablecontent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new content created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct content retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"contentName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playablecontent/{{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playablecontent",
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"playlistId\", jsonResponse.id);\r",
									"pm.environment.set(\"playlistName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Playlist created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"CategoryId\": 3,\r\n            \"Description\": \"Rock uruguayo\",\r\n            \"ImageURL\": \"\",\r\n            \"Name\": \"Rock uruguayo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playlist",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new playlist created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"playlist retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct playlist retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"playlistName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/playlist/{{playlistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist",
								"{{playlistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add created content to playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"playlistId\", jsonResponse.id);\r",
									"pm.environment.set(\"playlistName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Playlist created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"CategoryId\": 3,\r\n            \"Description\": \"Rock uruguayo\",\r\n            \"ImageURL\": \"\",\r\n            \"Name\": \"Rock uruguayo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/playlist/{{playlistId}}/contents?contentId={{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"playlist",
								"{{playlistId}}",
								"contents"
							],
							"query": [
								{
									"key": "contentId",
									"value": "{{contentId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create administrator as administrator",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"administratorId\", jsonResponse.id);\r",
									"pm.environment.set(\"administratorName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Content created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"juan@admin.admin\",\r\n    \"Name\": \"juan\",\r\n    \"Password\": \"juan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new administrator created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Administrator retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct administrator retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"administratorName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administrators/{{administratorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"{{administratorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete administrator as administrator",
			"item": [
				{
					"name": "Authenticate Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new administrator Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"administratorId\", jsonResponse.id);\r",
									"pm.environment.set(\"administratorName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Administrator created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"chiara@admin.admin\",\r\n    \"Name\": \"chiara\",\r\n    \"Password\": \"chiara\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new administrator created Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Administrator retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct administrator retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"administratorName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administrators/{{administratorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"{{administratorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Administrator deleted successfully\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administrators/{{administratorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"{{administratorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert created administrator deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check administrator deleted successfully\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administrators/{{administratorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"{{administratorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update administrator as administrator",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json;\r",
									"\r",
									"pm.environment.set(\"token\", jsonResponse.token);\r",
									"\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"administratorId\", jsonResponse.id);\r",
									"pm.environment.set(\"administratorName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Administrator created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"pedro@admin.admin\",\r\n    \"Name\": \"pedro\",\r\n    \"Password\": \"pedro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assert new administrator created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Administrator retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct administrator retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eq(pm.environment.get(\"administratorName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/administrators/{{administratorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"{{administratorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"administratorId\", jsonResponse.id);\r",
									"pm.environment.set(\"administratorName\", jsonResponse.name);\r",
									"\r",
									"pm.test(\"Administrator created successfully\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"nina@admin.admin\",\r\n    \"Name\": \"nina\",\r\n    \"Password\": \"nina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/{{administratorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"{{administratorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Full psychologist maintenance as administrator",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"pm.test(\"Authentication successful\", function () {\r",
									"    pm.response.to.have.status(202)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@admin.admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/administrators/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"administrators",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new psychologist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"psychologistId\", jsonResponse.id);\r",
									"pm.environment.set(\"psychologistName\", jsonResponse.psychologistName);\r",
									"\r",
									"pm.test(\"Psychologist created successfully\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PsychologistName\": \"Pedro\",\r\n    \"PsychologistSurname\": \"Perez\",\r\n    \"IsRemote\": true,\r\n    \"Address\": \"BetterCalm 1234\",\r\n    \"ActiveYears\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/psychologists",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"psychologists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get newly created psychologist Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Psychologist retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Correct psychologist retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.psychologistName).to.eq(pm.environment.get(\"psychologistName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/psychologists/{{psychologistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"psychologists",
								"{{psychologistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created psychologist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var aux = JSON.parse(pm.request.toJSON().body.raw)\r",
									"console.log(aux.PsychologistSurname)\r",
									"pm.environment.set(\"psychologistSurname\", JSON.parse(pm.request.toJSON().body.raw).PsychologistSurname);\r",
									"\r",
									"pm.test(\"Psychologist updated successfully\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PsychologistName\": \"Pedro\",\r\n    \"PsychologistSurname\": \"Picapiedra\",\r\n    \"IsRemote\": true,\r\n    \"Address\": \"BetterCalm 1234\",\r\n    \"ActiveYears\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/psychologists/{{psychologistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"psychologists",
								"{{psychologistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get newly updated psychologist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Psychologist retrieved successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Psychologist updated successfully\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.psychologistSurname).to.eq(pm.environment.get(\"psychologistSurname\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/psychologists/{{psychologistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"psychologists",
								"{{psychologistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete psychologist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Psychologist deleted successfully\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/psychologists/{{psychologistId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"psychologists",
								"{{psychologistId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000/api"
		},
		{
			"key": "variable_key",
			"value": ""
		}
	]
}